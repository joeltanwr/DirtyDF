
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples\plot_basic_stainer_example.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_basic_stainer_example.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_basic_stainer_example.py:


Basic Usage of Stainers (no DirtyDF)
====================================

This page shows some basic examples of using stainers to directly transform panda dataframes.

.. GENERATED FROM PYTHON SOURCE LINES 8-12

.. code-block:: default


    import pandas as pd
    import numpy as np
    from ddf.stainer import ShuffleStainer, InflectionStainer, DatetimeFormatStainer, DatetimeSplitStainer







.. GENERATED FROM PYTHON SOURCE LINES 13-14

For the first example, let us use a basic dataset containing only 6 rows and 2 columns, an integer ID and an animal class.

.. GENERATED FROM PYTHON SOURCE LINES 14-18

.. code-block:: default


    df = pd.DataFrame([(0, 'Cat'), (1, 'Dog'), (2, 'Rabbit'), (3, 'Cat'), (4, 'Cat'), (5, 'Dog')], columns=('id', 'class'))
    df






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>id</th>
          <th>class</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>0</td>
          <td>Cat</td>
        </tr>
        <tr>
          <th>1</th>
          <td>1</td>
          <td>Dog</td>
        </tr>
        <tr>
          <th>2</th>
          <td>2</td>
          <td>Rabbit</td>
        </tr>
        <tr>
          <th>3</th>
          <td>3</td>
          <td>Cat</td>
        </tr>
        <tr>
          <th>4</th>
          <td>4</td>
          <td>Cat</td>
        </tr>
        <tr>
          <th>5</th>
          <td>5</td>
          <td>Dog</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 19-21

We now apply a ShuffleStainer to shuffle the rows in this dataset. Note that we require to pass in a numpy random generator for
random generation.

.. GENERATED FROM PYTHON SOURCE LINES 23-25

The stainer's transform method will output 3 objects: the transformed dataframe, a row map which maps the rows in the old dataframe
to the new one, and a column map which maps the columns in the old dataframe to the new one.

.. GENERATED FROM PYTHON SOURCE LINES 25-32

.. code-block:: default


    shuffle_stainer = ShuffleStainer()
    rng = np.random.default_rng(42)

    new_df, row_map, col_map = shuffle_stainer.transform(df, rng)
    new_df






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>id</th>
          <th>class</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>3</td>
          <td>Cat</td>
        </tr>
        <tr>
          <th>1</th>
          <td>2</td>
          <td>Rabbit</td>
        </tr>
        <tr>
          <th>2</th>
          <td>5</td>
          <td>Dog</td>
        </tr>
        <tr>
          <th>3</th>
          <td>4</td>
          <td>Cat</td>
        </tr>
        <tr>
          <th>4</th>
          <td>1</td>
          <td>Dog</td>
        </tr>
        <tr>
          <th>5</th>
          <td>0</td>
          <td>Cat</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 33-35

Also, we can check the row map to determine which rows in the old dataframe were mapped to the new ones. (Note that ShuffleStainer
does not affect or alter columns, so the column map is simply an empty dictionary)

.. GENERATED FROM PYTHON SOURCE LINES 35-38

.. code-block:: default


    row_map





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    {3: [0], 2: [1], 5: [2], 4: [3], 1: [4], 0: [5]}



.. GENERATED FROM PYTHON SOURCE LINES 39-41

The output shows that the 3rd row index (0-based indexing) from the original dataframe is mapped to the 0-th row in the new
dataframe, as well as others. You may check with the original dataframe above to verify that this is true.

.. GENERATED FROM PYTHON SOURCE LINES 43-45

Furthermore, you may use the stainer's `get_history()` method to get the name of the stainer, a description of how the stainer 
had transformed the dataframe, and the time taken for said transformation.

.. GENERATED FROM PYTHON SOURCE LINES 45-46

.. code-block:: default


    shuffle_stainer.get_history()



.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ('Shuffle', 'Order of rows randomized', 0.002046823501586914)




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.011 seconds)


.. _sphx_glr_download_auto_examples_plot_basic_stainer_example.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_basic_stainer_example.py <plot_basic_stainer_example.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_basic_stainer_example.ipynb <plot_basic_stainer_example.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
